                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module key
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _uart_send
                                     12 	.globl _seg_show_num
                                     13 	.globl _TF2
                                     14 	.globl _EXF2
                                     15 	.globl _RCLK
                                     16 	.globl _TCLK
                                     17 	.globl _EXEN2
                                     18 	.globl _TR2
                                     19 	.globl _C_T2
                                     20 	.globl _CP_RL2
                                     21 	.globl _T2CON_7
                                     22 	.globl _T2CON_6
                                     23 	.globl _T2CON_5
                                     24 	.globl _T2CON_4
                                     25 	.globl _T2CON_3
                                     26 	.globl _T2CON_2
                                     27 	.globl _T2CON_1
                                     28 	.globl _T2CON_0
                                     29 	.globl _PT2
                                     30 	.globl _ET2
                                     31 	.globl _CY
                                     32 	.globl _AC
                                     33 	.globl _F0
                                     34 	.globl _RS1
                                     35 	.globl _RS0
                                     36 	.globl _OV
                                     37 	.globl _F1
                                     38 	.globl _P
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ES
                                     62 	.globl _ET1
                                     63 	.globl _EX1
                                     64 	.globl _ET0
                                     65 	.globl _EX0
                                     66 	.globl _P2_7
                                     67 	.globl _P2_6
                                     68 	.globl _P2_5
                                     69 	.globl _P2_4
                                     70 	.globl _P2_3
                                     71 	.globl _P2_2
                                     72 	.globl _P2_1
                                     73 	.globl _P2_0
                                     74 	.globl _SM0
                                     75 	.globl _SM1
                                     76 	.globl _SM2
                                     77 	.globl _REN
                                     78 	.globl _TB8
                                     79 	.globl _RB8
                                     80 	.globl _TI
                                     81 	.globl _RI
                                     82 	.globl _P1_7
                                     83 	.globl _P1_6
                                     84 	.globl _P1_5
                                     85 	.globl _P1_4
                                     86 	.globl _P1_3
                                     87 	.globl _P1_2
                                     88 	.globl _P1_1
                                     89 	.globl _P1_0
                                     90 	.globl _TF1
                                     91 	.globl _TR1
                                     92 	.globl _TF0
                                     93 	.globl _TR0
                                     94 	.globl _IE1
                                     95 	.globl _IT1
                                     96 	.globl _IE0
                                     97 	.globl _IT0
                                     98 	.globl _P0_7
                                     99 	.globl _P0_6
                                    100 	.globl _P0_5
                                    101 	.globl _P0_4
                                    102 	.globl _P0_3
                                    103 	.globl _P0_2
                                    104 	.globl _P0_1
                                    105 	.globl _P0_0
                                    106 	.globl _TH2
                                    107 	.globl _TL2
                                    108 	.globl _RCAP2H
                                    109 	.globl _RCAP2L
                                    110 	.globl _T2CON
                                    111 	.globl _B
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _IP
                                    115 	.globl _P3
                                    116 	.globl _IE
                                    117 	.globl _P2
                                    118 	.globl _SBUF
                                    119 	.globl _SCON
                                    120 	.globl _P1
                                    121 	.globl _TH1
                                    122 	.globl _TH0
                                    123 	.globl _TL1
                                    124 	.globl _TL0
                                    125 	.globl _TMOD
                                    126 	.globl _TCON
                                    127 	.globl _PCON
                                    128 	.globl _DPH
                                    129 	.globl _DPL
                                    130 	.globl _SP
                                    131 	.globl _P0
                                    132 	.globl _key_sta
                                    133 	.globl _key_code_map
                                    134 	.globl _key_action
                                    135 	.globl _key_driver
                                    136 	.globl _key_scan
                                    137 ;--------------------------------------------------------
                                    138 ; special function registers
                                    139 ;--------------------------------------------------------
                                    140 	.area RSEG    (ABS,DATA)
      000000                        141 	.org 0x0000
                           000080   142 _P0	=	0x0080
                           000081   143 _SP	=	0x0081
                           000082   144 _DPL	=	0x0082
                           000083   145 _DPH	=	0x0083
                           000087   146 _PCON	=	0x0087
                           000088   147 _TCON	=	0x0088
                           000089   148 _TMOD	=	0x0089
                           00008A   149 _TL0	=	0x008a
                           00008B   150 _TL1	=	0x008b
                           00008C   151 _TH0	=	0x008c
                           00008D   152 _TH1	=	0x008d
                           000090   153 _P1	=	0x0090
                           000098   154 _SCON	=	0x0098
                           000099   155 _SBUF	=	0x0099
                           0000A0   156 _P2	=	0x00a0
                           0000A8   157 _IE	=	0x00a8
                           0000B0   158 _P3	=	0x00b0
                           0000B8   159 _IP	=	0x00b8
                           0000D0   160 _PSW	=	0x00d0
                           0000E0   161 _ACC	=	0x00e0
                           0000F0   162 _B	=	0x00f0
                           0000C8   163 _T2CON	=	0x00c8
                           0000CA   164 _RCAP2L	=	0x00ca
                           0000CB   165 _RCAP2H	=	0x00cb
                           0000CC   166 _TL2	=	0x00cc
                           0000CD   167 _TH2	=	0x00cd
                                    168 ;--------------------------------------------------------
                                    169 ; special function bits
                                    170 ;--------------------------------------------------------
                                    171 	.area RSEG    (ABS,DATA)
      000000                        172 	.org 0x0000
                           000080   173 _P0_0	=	0x0080
                           000081   174 _P0_1	=	0x0081
                           000082   175 _P0_2	=	0x0082
                           000083   176 _P0_3	=	0x0083
                           000084   177 _P0_4	=	0x0084
                           000085   178 _P0_5	=	0x0085
                           000086   179 _P0_6	=	0x0086
                           000087   180 _P0_7	=	0x0087
                           000088   181 _IT0	=	0x0088
                           000089   182 _IE0	=	0x0089
                           00008A   183 _IT1	=	0x008a
                           00008B   184 _IE1	=	0x008b
                           00008C   185 _TR0	=	0x008c
                           00008D   186 _TF0	=	0x008d
                           00008E   187 _TR1	=	0x008e
                           00008F   188 _TF1	=	0x008f
                           000090   189 _P1_0	=	0x0090
                           000091   190 _P1_1	=	0x0091
                           000092   191 _P1_2	=	0x0092
                           000093   192 _P1_3	=	0x0093
                           000094   193 _P1_4	=	0x0094
                           000095   194 _P1_5	=	0x0095
                           000096   195 _P1_6	=	0x0096
                           000097   196 _P1_7	=	0x0097
                           000098   197 _RI	=	0x0098
                           000099   198 _TI	=	0x0099
                           00009A   199 _RB8	=	0x009a
                           00009B   200 _TB8	=	0x009b
                           00009C   201 _REN	=	0x009c
                           00009D   202 _SM2	=	0x009d
                           00009E   203 _SM1	=	0x009e
                           00009F   204 _SM0	=	0x009f
                           0000A0   205 _P2_0	=	0x00a0
                           0000A1   206 _P2_1	=	0x00a1
                           0000A2   207 _P2_2	=	0x00a2
                           0000A3   208 _P2_3	=	0x00a3
                           0000A4   209 _P2_4	=	0x00a4
                           0000A5   210 _P2_5	=	0x00a5
                           0000A6   211 _P2_6	=	0x00a6
                           0000A7   212 _P2_7	=	0x00a7
                           0000A8   213 _EX0	=	0x00a8
                           0000A9   214 _ET0	=	0x00a9
                           0000AA   215 _EX1	=	0x00aa
                           0000AB   216 _ET1	=	0x00ab
                           0000AC   217 _ES	=	0x00ac
                           0000AF   218 _EA	=	0x00af
                           0000B0   219 _P3_0	=	0x00b0
                           0000B1   220 _P3_1	=	0x00b1
                           0000B2   221 _P3_2	=	0x00b2
                           0000B3   222 _P3_3	=	0x00b3
                           0000B4   223 _P3_4	=	0x00b4
                           0000B5   224 _P3_5	=	0x00b5
                           0000B6   225 _P3_6	=	0x00b6
                           0000B7   226 _P3_7	=	0x00b7
                           0000B0   227 _RXD	=	0x00b0
                           0000B1   228 _TXD	=	0x00b1
                           0000B2   229 _INT0	=	0x00b2
                           0000B3   230 _INT1	=	0x00b3
                           0000B4   231 _T0	=	0x00b4
                           0000B5   232 _T1	=	0x00b5
                           0000B6   233 _WR	=	0x00b6
                           0000B7   234 _RD	=	0x00b7
                           0000B8   235 _PX0	=	0x00b8
                           0000B9   236 _PT0	=	0x00b9
                           0000BA   237 _PX1	=	0x00ba
                           0000BB   238 _PT1	=	0x00bb
                           0000BC   239 _PS	=	0x00bc
                           0000D0   240 _P	=	0x00d0
                           0000D1   241 _F1	=	0x00d1
                           0000D2   242 _OV	=	0x00d2
                           0000D3   243 _RS0	=	0x00d3
                           0000D4   244 _RS1	=	0x00d4
                           0000D5   245 _F0	=	0x00d5
                           0000D6   246 _AC	=	0x00d6
                           0000D7   247 _CY	=	0x00d7
                           0000AD   248 _ET2	=	0x00ad
                           0000BD   249 _PT2	=	0x00bd
                           0000C8   250 _T2CON_0	=	0x00c8
                           0000C9   251 _T2CON_1	=	0x00c9
                           0000CA   252 _T2CON_2	=	0x00ca
                           0000CB   253 _T2CON_3	=	0x00cb
                           0000CC   254 _T2CON_4	=	0x00cc
                           0000CD   255 _T2CON_5	=	0x00cd
                           0000CE   256 _T2CON_6	=	0x00ce
                           0000CF   257 _T2CON_7	=	0x00cf
                           0000C8   258 _CP_RL2	=	0x00c8
                           0000C9   259 _C_T2	=	0x00c9
                           0000CA   260 _TR2	=	0x00ca
                           0000CB   261 _EXEN2	=	0x00cb
                           0000CC   262 _TCLK	=	0x00cc
                           0000CD   263 _RCLK	=	0x00cd
                           0000CE   264 _EXF2	=	0x00ce
                           0000CF   265 _TF2	=	0x00cf
                                    266 ;--------------------------------------------------------
                                    267 ; overlayable register banks
                                    268 ;--------------------------------------------------------
                                    269 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        270 	.ds 8
                                    271 ;--------------------------------------------------------
                                    272 ; internal ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area DSEG    (DATA)
      000000                        275 _key_code_map::
      000000                        276 	.ds 16
      000010                        277 _key_sta::
      000010                        278 	.ds 16
      000020                        279 _key_action_show_num_65536_12:
      000020                        280 	.ds 2
      000022                        281 _key_driver_back_up_65536_21:
      000022                        282 	.ds 16
      000032                        283 _key_driver_i_65536_21:
      000032                        284 	.ds 1
      000033                        285 _key_driver_j_65536_21:
      000033                        286 	.ds 1
      000034                        287 _key_scan_key_out_65536_28:
      000034                        288 	.ds 1
      000035                        289 _key_scan_key_buf_65536_28:
      000035                        290 	.ds 16
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable items in internal ram 
                                    293 ;--------------------------------------------------------
                                    294 	.area	OSEG    (OVR,DATA)
                                    295 ;--------------------------------------------------------
                                    296 ; indirectly addressable internal ram data
                                    297 ;--------------------------------------------------------
                                    298 	.area ISEG    (DATA)
                                    299 ;--------------------------------------------------------
                                    300 ; absolute internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area IABS    (ABS,DATA)
                                    303 	.area IABS    (ABS,DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; bit data
                                    306 ;--------------------------------------------------------
                                    307 	.area BSEG    (BIT)
                                    308 ;--------------------------------------------------------
                                    309 ; paged external ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area PSEG    (PAG,XDATA)
                                    312 ;--------------------------------------------------------
                                    313 ; external ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area XSEG    (XDATA)
                                    316 ;--------------------------------------------------------
                                    317 ; absolute external ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area XABS    (ABS,XDATA)
                                    320 ;--------------------------------------------------------
                                    321 ; external initialized ram data
                                    322 ;--------------------------------------------------------
                                    323 	.area XISEG   (XDATA)
                                    324 	.area HOME    (CODE)
                                    325 	.area GSINIT0 (CODE)
                                    326 	.area GSINIT1 (CODE)
                                    327 	.area GSINIT2 (CODE)
                                    328 	.area GSINIT3 (CODE)
                                    329 	.area GSINIT4 (CODE)
                                    330 	.area GSINIT5 (CODE)
                                    331 	.area GSINIT  (CODE)
                                    332 	.area GSFINAL (CODE)
                                    333 	.area CSEG    (CODE)
                                    334 ;--------------------------------------------------------
                                    335 ; global & static initialisations
                                    336 ;--------------------------------------------------------
                                    337 	.area HOME    (CODE)
                                    338 	.area GSINIT  (CODE)
                                    339 	.area GSFINAL (CODE)
                                    340 	.area GSINIT  (CODE)
                                    341 ;------------------------------------------------------------
                                    342 ;Allocation info for local variables in function 'key_action'
                                    343 ;------------------------------------------------------------
                                    344 ;show_num                  Allocated with name '_key_action_show_num_65536_12'
                                    345 ;key_code                  Allocated to registers r7 
                                    346 ;------------------------------------------------------------
                                    347 ;	key.c:18: static unsigned int show_num = 0;
      000000 E4               [12]  348 	clr	a
      000001 F5*20            [12]  349 	mov	_key_action_show_num_65536_12,a
      000003 F5*21            [12]  350 	mov	(_key_action_show_num_65536_12 + 1),a
                                    351 ;------------------------------------------------------------
                                    352 ;Allocation info for local variables in function 'key_driver'
                                    353 ;------------------------------------------------------------
                                    354 ;back_up                   Allocated with name '_key_driver_back_up_65536_21'
                                    355 ;i                         Allocated with name '_key_driver_i_65536_21'
                                    356 ;j                         Allocated with name '_key_driver_j_65536_21'
                                    357 ;------------------------------------------------------------
                                    358 ;	key.c:56: static unsigned char back_up[4][4] = { /* 按键值备份，保留前一次的值 */
      000005 75*22 01         [24]  359 	mov	_key_driver_back_up_65536_21,#0x01
      000008 75*23 01         [24]  360 	mov	(_key_driver_back_up_65536_21 + 0x0001),#0x01
      00000B 75*24 01         [24]  361 	mov	(_key_driver_back_up_65536_21 + 0x0002),#0x01
      00000E 75*25 01         [24]  362 	mov	(_key_driver_back_up_65536_21 + 0x0003),#0x01
      000011 75*26 01         [24]  363 	mov	(_key_driver_back_up_65536_21 + 0x0004),#0x01
      000014 75*27 01         [24]  364 	mov	(_key_driver_back_up_65536_21 + 0x0005),#0x01
      000017 75*28 01         [24]  365 	mov	(_key_driver_back_up_65536_21 + 0x0006),#0x01
      00001A 75*29 01         [24]  366 	mov	(_key_driver_back_up_65536_21 + 0x0007),#0x01
      00001D 75*2A 01         [24]  367 	mov	(_key_driver_back_up_65536_21 + 0x0008),#0x01
      000020 75*2B 01         [24]  368 	mov	(_key_driver_back_up_65536_21 + 0x0009),#0x01
      000023 75*2C 01         [24]  369 	mov	(_key_driver_back_up_65536_21 + 0x000a),#0x01
      000026 75*2D 01         [24]  370 	mov	(_key_driver_back_up_65536_21 + 0x000b),#0x01
      000029 75*2E 01         [24]  371 	mov	(_key_driver_back_up_65536_21 + 0x000c),#0x01
      00002C 75*2F 01         [24]  372 	mov	(_key_driver_back_up_65536_21 + 0x000d),#0x01
      00002F 75*30 01         [24]  373 	mov	(_key_driver_back_up_65536_21 + 0x000e),#0x01
      000032 75*31 01         [24]  374 	mov	(_key_driver_back_up_65536_21 + 0x000f),#0x01
                                    375 ;------------------------------------------------------------
                                    376 ;Allocation info for local variables in function 'key_scan'
                                    377 ;------------------------------------------------------------
                                    378 ;key_out                   Allocated with name '_key_scan_key_out_65536_28'
                                    379 ;key_buf                   Allocated with name '_key_scan_key_buf_65536_28'
                                    380 ;i                         Allocated to registers r7 
                                    381 ;------------------------------------------------------------
                                    382 ;	key.c:77: static unsigned char key_out = 0;
      000035 75*34 00         [24]  383 	mov	_key_scan_key_out_65536_28,#0x00
                                    384 ;	key.c:78: static unsigned char key_buf[4][4] = {
      000038 75*35 FF         [24]  385 	mov	_key_scan_key_buf_65536_28,#0xff
      00003B 75*36 FF         [24]  386 	mov	(_key_scan_key_buf_65536_28 + 0x0001),#0xff
      00003E 75*37 FF         [24]  387 	mov	(_key_scan_key_buf_65536_28 + 0x0002),#0xff
      000041 75*38 FF         [24]  388 	mov	(_key_scan_key_buf_65536_28 + 0x0003),#0xff
      000044 75*39 FF         [24]  389 	mov	(_key_scan_key_buf_65536_28 + 0x0004),#0xff
      000047 75*3A FF         [24]  390 	mov	(_key_scan_key_buf_65536_28 + 0x0005),#0xff
      00004A 75*3B FF         [24]  391 	mov	(_key_scan_key_buf_65536_28 + 0x0006),#0xff
      00004D 75*3C FF         [24]  392 	mov	(_key_scan_key_buf_65536_28 + 0x0007),#0xff
      000050 75*3D FF         [24]  393 	mov	(_key_scan_key_buf_65536_28 + 0x0008),#0xff
      000053 75*3E FF         [24]  394 	mov	(_key_scan_key_buf_65536_28 + 0x0009),#0xff
      000056 75*3F FF         [24]  395 	mov	(_key_scan_key_buf_65536_28 + 0x000a),#0xff
      000059 75*40 FF         [24]  396 	mov	(_key_scan_key_buf_65536_28 + 0x000b),#0xff
      00005C 75*41 FF         [24]  397 	mov	(_key_scan_key_buf_65536_28 + 0x000c),#0xff
      00005F 75*42 FF         [24]  398 	mov	(_key_scan_key_buf_65536_28 + 0x000d),#0xff
      000062 75*43 FF         [24]  399 	mov	(_key_scan_key_buf_65536_28 + 0x000e),#0xff
      000065 75*44 FF         [24]  400 	mov	(_key_scan_key_buf_65536_28 + 0x000f),#0xff
                                    401 ;	key.c:5: unsigned char key_code_map[4][4] = {
      000068 75*00 31         [24]  402 	mov	_key_code_map,#0x31
      00006B 75*01 32         [24]  403 	mov	(_key_code_map + 0x0001),#0x32
      00006E 75*02 33         [24]  404 	mov	(_key_code_map + 0x0002),#0x33
      000071 75*03 24         [24]  405 	mov	(_key_code_map + 0x0003),#0x24
      000074 75*04 34         [24]  406 	mov	(_key_code_map + 0x0004),#0x34
      000077 75*05 35         [24]  407 	mov	(_key_code_map + 0x0005),#0x35
      00007A 75*06 36         [24]  408 	mov	(_key_code_map + 0x0006),#0x36
      00007D 75*07 25         [24]  409 	mov	(_key_code_map + 0x0007),#0x25
      000080 75*08 37         [24]  410 	mov	(_key_code_map + 0x0008),#0x37
      000083 75*09 38         [24]  411 	mov	(_key_code_map + 0x0009),#0x38
      000086 75*0A 39         [24]  412 	mov	(_key_code_map + 0x000a),#0x39
      000089 75*0B 28         [24]  413 	mov	(_key_code_map + 0x000b),#0x28
      00008C 75*0C 30         [24]  414 	mov	(_key_code_map + 0x000c),#0x30
      00008F 75*0D 1B         [24]  415 	mov	(_key_code_map + 0x000d),#0x1b
      000092 75*0E 0D         [24]  416 	mov	(_key_code_map + 0x000e),#0x0d
      000095 75*0F 27         [24]  417 	mov	(_key_code_map + 0x000f),#0x27
                                    418 ;	key.c:12: unsigned char key_sta[4][4] = { /* 全部矩阵按键的当前状态 */
      000098 75*10 01         [24]  419 	mov	_key_sta,#0x01
      00009B 75*11 01         [24]  420 	mov	(_key_sta + 0x0001),#0x01
      00009E 75*12 01         [24]  421 	mov	(_key_sta + 0x0002),#0x01
      0000A1 75*13 01         [24]  422 	mov	(_key_sta + 0x0003),#0x01
      0000A4 75*14 01         [24]  423 	mov	(_key_sta + 0x0004),#0x01
      0000A7 75*15 01         [24]  424 	mov	(_key_sta + 0x0005),#0x01
      0000AA 75*16 01         [24]  425 	mov	(_key_sta + 0x0006),#0x01
      0000AD 75*17 01         [24]  426 	mov	(_key_sta + 0x0007),#0x01
      0000B0 75*18 01         [24]  427 	mov	(_key_sta + 0x0008),#0x01
      0000B3 75*19 01         [24]  428 	mov	(_key_sta + 0x0009),#0x01
      0000B6 75*1A 01         [24]  429 	mov	(_key_sta + 0x000a),#0x01
      0000B9 75*1B 01         [24]  430 	mov	(_key_sta + 0x000b),#0x01
      0000BC 75*1C 01         [24]  431 	mov	(_key_sta + 0x000c),#0x01
      0000BF 75*1D 01         [24]  432 	mov	(_key_sta + 0x000d),#0x01
      0000C2 75*1E 01         [24]  433 	mov	(_key_sta + 0x000e),#0x01
      0000C5 75*1F 01         [24]  434 	mov	(_key_sta + 0x000f),#0x01
                                    435 ;--------------------------------------------------------
                                    436 ; Home
                                    437 ;--------------------------------------------------------
                                    438 	.area HOME    (CODE)
                                    439 	.area HOME    (CODE)
                                    440 ;--------------------------------------------------------
                                    441 ; code
                                    442 ;--------------------------------------------------------
                                    443 	.area CSEG    (CODE)
                                    444 ;------------------------------------------------------------
                                    445 ;Allocation info for local variables in function 'key_action'
                                    446 ;------------------------------------------------------------
                                    447 ;show_num                  Allocated with name '_key_action_show_num_65536_12'
                                    448 ;key_code                  Allocated to registers r7 
                                    449 ;------------------------------------------------------------
                                    450 ;	key.c:16: void key_action(unsigned char key_code)
                                    451 ;	-----------------------------------------
                                    452 ;	 function key_action
                                    453 ;	-----------------------------------------
      000000                        454 _key_action:
                           000007   455 	ar7 = 0x07
                           000006   456 	ar6 = 0x06
                           000005   457 	ar5 = 0x05
                           000004   458 	ar4 = 0x04
                           000003   459 	ar3 = 0x03
                           000002   460 	ar2 = 0x02
                           000001   461 	ar1 = 0x01
                           000000   462 	ar0 = 0x00
      000000 AF 82            [24]  463 	mov	r7,dpl
                                    464 ;	key.c:20: if ((key_code >= 0x30) && (key_code <= 0x39)) /* 输入0～9 */
      000002 BF 30 00         [24]  465 	cjne	r7,#0x30,00156$
      000005                        466 00156$:
      000005 40 16            [24]  467 	jc	00119$
      000007 EF               [12]  468 	mov	a,r7
      000008 24 C6            [12]  469 	add	a,#0xff - 0x39
      00000A 40 11            [24]  470 	jc	00119$
                                    471 ;	key.c:22: show_num = key_code - 0x30;
      00000C 8F 05            [24]  472 	mov	ar5,r7
      00000E 7E 00            [12]  473 	mov	r6,#0x00
      000010 ED               [12]  474 	mov	a,r5
      000011 24 D0            [12]  475 	add	a,#0xd0
      000013 F5*20            [12]  476 	mov	_key_action_show_num_65536_12,a
      000015 EE               [12]  477 	mov	a,r6
      000016 34 FF            [12]  478 	addc	a,#0xff
      000018 F5*21            [12]  479 	mov	(_key_action_show_num_65536_12 + 1),a
      00001A 02r00r89         [24]  480 	ljmp	00120$
      00001D                        481 00119$:
                                    482 ;	key.c:24: else if (key_code == 0x24)
      00001D BF 24 0B         [24]  483 	cjne	r7,#0x24,00116$
                                    484 ;	key.c:26: show_num++;
      000020 05*20            [12]  485 	inc	_key_action_show_num_65536_12
      000022 E4               [12]  486 	clr	a
      000023 B5*20 02         [24]  487 	cjne	a,_key_action_show_num_65536_12,00161$
      000026 05*21            [12]  488 	inc	(_key_action_show_num_65536_12 + 1)
      000028                        489 00161$:
      000028 02r00r89         [24]  490 	ljmp	00120$
      00002B                        491 00116$:
                                    492 ;	key.c:28: else if (key_code == 0x25)
      00002B BF 25 14         [24]  493 	cjne	r7,#0x25,00113$
                                    494 ;	key.c:30: show_num = show_num*10;
      00002E 85*20*00         [24]  495 	mov	__mulint_PARM_2,_key_action_show_num_65536_12
      000031 85*21*01         [24]  496 	mov	(__mulint_PARM_2 + 1),(_key_action_show_num_65536_12 + 1)
      000034 90 00 0A         [24]  497 	mov	dptr,#0x000a
      000037 12r00r00         [24]  498 	lcall	__mulint
      00003A 85 82*20         [24]  499 	mov	_key_action_show_num_65536_12,dpl
      00003D 85 83*21         [24]  500 	mov	(_key_action_show_num_65536_12 + 1),dph
      000040 80 47            [24]  501 	sjmp	00120$
      000042                        502 00113$:
                                    503 ;	key.c:32: else if (key_code == 0x28)
      000042 BF 28 0B         [24]  504 	cjne	r7,#0x28,00110$
                                    505 ;	key.c:34: show_num--;
      000045 15*20            [12]  506 	dec	_key_action_show_num_65536_12
      000047 74 FF            [12]  507 	mov	a,#0xff
      000049 B5*20 02         [24]  508 	cjne	a,_key_action_show_num_65536_12,00166$
      00004C 15*21            [12]  509 	dec	(_key_action_show_num_65536_12 + 1)
      00004E                        510 00166$:
      00004E 80 39            [24]  511 	sjmp	00120$
      000050                        512 00110$:
                                    513 ;	key.c:36: else if (key_code == 0x27)
      000050 BF 27 17         [24]  514 	cjne	r7,#0x27,00107$
                                    515 ;	key.c:38: show_num = show_num/10;
      000053 75*00 0A         [24]  516 	mov	__divuint_PARM_2,#0x0a
      000056 75*01 00         [24]  517 	mov	(__divuint_PARM_2 + 1),#0x00
      000059 85*20 82         [24]  518 	mov	dpl,_key_action_show_num_65536_12
      00005C 85*21 83         [24]  519 	mov	dph,(_key_action_show_num_65536_12 + 1)
      00005F 12r00r00         [24]  520 	lcall	__divuint
      000062 85 82*20         [24]  521 	mov	_key_action_show_num_65536_12,dpl
      000065 85 83*21         [24]  522 	mov	(_key_action_show_num_65536_12 + 1),dph
      000068 80 1F            [24]  523 	sjmp	00120$
      00006A                        524 00107$:
                                    525 ;	key.c:40: else if (key_code == 0x0D)
      00006A BF 0D 08         [24]  526 	cjne	r7,#0x0d,00104$
                                    527 ;	key.c:42: show_num = 5120;
      00006D 75*20 00         [24]  528 	mov	_key_action_show_num_65536_12,#0x00
      000070 75*21 14         [24]  529 	mov	(_key_action_show_num_65536_12 + 1),#0x14
      000073 80 14            [24]  530 	sjmp	00120$
      000075                        531 00104$:
                                    532 ;	key.c:44: else if (key_code == 0x1B)  /* ESC按键，电机控制按键 */
      000075 BF 1B 11         [24]  533 	cjne	r7,#0x1b,00120$
                                    534 ;	key.c:46: show_num = 0;
      000078 E4               [12]  535 	clr	a
      000079 F5*20            [12]  536 	mov	_key_action_show_num_65536_12,a
      00007B F5*21            [12]  537 	mov	(_key_action_show_num_65536_12 + 1),a
                                    538 ;	key.c:47: uart_send("123", 3);
      00007D 75*00 03         [24]  539 	mov	_uart_send_PARM_2,#0x03
      000080 90r00r00         [24]  540 	mov	dptr,#___str_0
      000083 75 F0 80         [24]  541 	mov	b,#0x80
      000086 12r00r00         [24]  542 	lcall	_uart_send
      000089                        543 00120$:
                                    544 ;	key.c:50: seg_show_num(show_num);
      000089 85*20 82         [24]  545 	mov	dpl,_key_action_show_num_65536_12
      00008C 85*21 83         [24]  546 	mov	dph,(_key_action_show_num_65536_12 + 1)
                                    547 ;	key.c:51: }
      00008F 02r00r00         [24]  548 	ljmp	_seg_show_num
                                    549 ;------------------------------------------------------------
                                    550 ;Allocation info for local variables in function 'key_driver'
                                    551 ;------------------------------------------------------------
                                    552 ;back_up                   Allocated with name '_key_driver_back_up_65536_21'
                                    553 ;i                         Allocated with name '_key_driver_i_65536_21'
                                    554 ;j                         Allocated with name '_key_driver_j_65536_21'
                                    555 ;------------------------------------------------------------
                                    556 ;	key.c:53: void key_driver(void)
                                    557 ;	-----------------------------------------
                                    558 ;	 function key_driver
                                    559 ;	-----------------------------------------
      000092                        560 _key_driver:
                                    561 ;	key.c:60: for (i = 0; i < 4; i++)
      000092 75*32 00         [24]  562 	mov	_key_driver_i_65536_21,#0x00
                                    563 ;	key.c:62: for (j = 0; j < 4; j++)
      000095                        564 00115$:
      000095 E5*32            [12]  565 	mov	a,_key_driver_i_65536_21
      000097 25*32            [12]  566 	add	a,_key_driver_i_65536_21
      000099 25 E0            [12]  567 	add	a,acc
      00009B FE               [12]  568 	mov	r6,a
      00009C FD               [12]  569 	mov	r5,a
      00009D 24r22            [12]  570 	add	a,#_key_driver_back_up_65536_21
      00009F FC               [12]  571 	mov	r4,a
      0000A0 EE               [12]  572 	mov	a,r6
      0000A1 24r10            [12]  573 	add	a,#_key_sta
      0000A3 FB               [12]  574 	mov	r3,a
      0000A4 75*33 00         [24]  575 	mov	_key_driver_j_65536_21,#0x00
      0000A7                        576 00107$:
                                    577 ;	key.c:64: if (back_up[i][j] != key_sta[i][j])
      0000A7 E5*33            [12]  578 	mov	a,_key_driver_j_65536_21
      0000A9 2C               [12]  579 	add	a,r4
      0000AA F9               [12]  580 	mov	r1,a
      0000AB E5*33            [12]  581 	mov	a,_key_driver_j_65536_21
      0000AD 2B               [12]  582 	add	a,r3
      0000AE F8               [12]  583 	mov	r0,a
      0000AF 87 07            [24]  584 	mov	ar7,@r1
      0000B1 86 02            [24]  585 	mov	ar2,@r0
      0000B3 EF               [12]  586 	mov	a,r7
      0000B4 B5 02 02         [24]  587 	cjne	a,ar2,00135$
      0000B7 80 26            [24]  588 	sjmp	00104$
      0000B9                        589 00135$:
                                    590 ;	key.c:66: if (key_sta[i][j] == 1)
      0000B9 ED               [12]  591 	mov	a,r5
      0000BA 24r10            [12]  592 	add	a,#_key_sta
      0000BC 25*33            [12]  593 	add	a,_key_driver_j_65536_21
      0000BE F9               [12]  594 	mov	r1,a
      0000BF 87 07            [24]  595 	mov	ar7,@r1
      0000C1 BF 01 1B         [24]  596 	cjne	r7,#0x01,00104$
                                    597 ;	key.c:67: key_action(key_code_map[i][j]);
      0000C4 ED               [12]  598 	mov	a,r5
      0000C5 24r00            [12]  599 	add	a,#_key_code_map
      0000C7 25*33            [12]  600 	add	a,_key_driver_j_65536_21
      0000C9 F9               [12]  601 	mov	r1,a
      0000CA 87 82            [24]  602 	mov	dpl,@r1
      0000CC C0 06            [24]  603 	push	ar6
      0000CE C0 05            [24]  604 	push	ar5
      0000D0 C0 04            [24]  605 	push	ar4
      0000D2 C0 03            [24]  606 	push	ar3
      0000D4 12r00r00         [24]  607 	lcall	_key_action
      0000D7 D0 03            [24]  608 	pop	ar3
      0000D9 D0 04            [24]  609 	pop	ar4
      0000DB D0 05            [24]  610 	pop	ar5
      0000DD D0 06            [24]  611 	pop	ar6
      0000DF                        612 00104$:
                                    613 ;	key.c:69: back_up[i][j] = key_sta[i][j];
      0000DF EE               [12]  614 	mov	a,r6
      0000E0 24r22            [12]  615 	add	a,#_key_driver_back_up_65536_21
      0000E2 25*33            [12]  616 	add	a,_key_driver_j_65536_21
      0000E4 F9               [12]  617 	mov	r1,a
      0000E5 EE               [12]  618 	mov	a,r6
      0000E6 24r10            [12]  619 	add	a,#_key_sta
      0000E8 25*33            [12]  620 	add	a,_key_driver_j_65536_21
      0000EA F8               [12]  621 	mov	r0,a
      0000EB 86 07            [24]  622 	mov	ar7,@r0
      0000ED A7 07            [24]  623 	mov	@r1,ar7
                                    624 ;	key.c:62: for (j = 0; j < 4; j++)
      0000EF 05*33            [12]  625 	inc	_key_driver_j_65536_21
      0000F1 74 FC            [12]  626 	mov	a,#0x100 - 0x04
      0000F3 25*33            [12]  627 	add	a,_key_driver_j_65536_21
      0000F5 50 B0            [24]  628 	jnc	00107$
                                    629 ;	key.c:60: for (i = 0; i < 4; i++)
      0000F7 05*32            [12]  630 	inc	_key_driver_i_65536_21
      0000F9 74 FC            [12]  631 	mov	a,#0x100 - 0x04
      0000FB 25*32            [12]  632 	add	a,_key_driver_i_65536_21
      0000FD 40 03            [24]  633 	jc	00139$
      0000FF 02r00r95         [24]  634 	ljmp	00115$
      000102                        635 00139$:
                                    636 ;	key.c:72: }
      000102 22               [24]  637 	ret
                                    638 ;------------------------------------------------------------
                                    639 ;Allocation info for local variables in function 'key_scan'
                                    640 ;------------------------------------------------------------
                                    641 ;key_out                   Allocated with name '_key_scan_key_out_65536_28'
                                    642 ;key_buf                   Allocated with name '_key_scan_key_buf_65536_28'
                                    643 ;i                         Allocated to registers r7 
                                    644 ;------------------------------------------------------------
                                    645 ;	key.c:74: void key_scan(void)
                                    646 ;	-----------------------------------------
                                    647 ;	 function key_scan
                                    648 ;	-----------------------------------------
      000103                        649 _key_scan:
                                    650 ;	key.c:84: key_buf[key_out][0] = (key_buf[key_out][0] << 1) | KEY_IN_1;
      000103 E5*34            [12]  651 	mov	a,_key_scan_key_out_65536_28
      000105 25*34            [12]  652 	add	a,_key_scan_key_out_65536_28
      000107 25 E0            [12]  653 	add	a,acc
      000109 24r35            [12]  654 	add	a,#_key_scan_key_buf_65536_28
      00010B F9               [12]  655 	mov	r1,a
      00010C E7               [12]  656 	mov	a,@r1
      00010D 27               [12]  657 	add	a,@r1
      00010E FF               [12]  658 	mov	r7,a
      00010F A2 A4            [12]  659 	mov	c,_P2_4
      000111 E4               [12]  660 	clr	a
      000112 33               [12]  661 	rlc	a
      000113 4F               [12]  662 	orl	a,r7
      000114 F7               [12]  663 	mov	@r1,a
                                    664 ;	key.c:85: key_buf[key_out][1] = (key_buf[key_out][1] << 1) | KEY_IN_2;
      000115 E5*34            [12]  665 	mov	a,_key_scan_key_out_65536_28
      000117 25*34            [12]  666 	add	a,_key_scan_key_out_65536_28
      000119 25 E0            [12]  667 	add	a,acc
      00011B 24r35            [12]  668 	add	a,#_key_scan_key_buf_65536_28
      00011D 04               [12]  669 	inc	a
      00011E F9               [12]  670 	mov	r1,a
      00011F E7               [12]  671 	mov	a,@r1
      000120 27               [12]  672 	add	a,@r1
      000121 FF               [12]  673 	mov	r7,a
      000122 A2 A5            [12]  674 	mov	c,_P2_5
      000124 E4               [12]  675 	clr	a
      000125 33               [12]  676 	rlc	a
      000126 4F               [12]  677 	orl	a,r7
      000127 F7               [12]  678 	mov	@r1,a
                                    679 ;	key.c:86: key_buf[key_out][2] = (key_buf[key_out][2] << 1) | KEY_IN_3;
      000128 E5*34            [12]  680 	mov	a,_key_scan_key_out_65536_28
      00012A 25*34            [12]  681 	add	a,_key_scan_key_out_65536_28
      00012C 25 E0            [12]  682 	add	a,acc
      00012E 24r35            [12]  683 	add	a,#_key_scan_key_buf_65536_28
      000130 24 02            [12]  684 	add	a,#0x02
      000132 F9               [12]  685 	mov	r1,a
      000133 E7               [12]  686 	mov	a,@r1
      000134 27               [12]  687 	add	a,@r1
      000135 FF               [12]  688 	mov	r7,a
      000136 A2 A6            [12]  689 	mov	c,_P2_6
      000138 E4               [12]  690 	clr	a
      000139 33               [12]  691 	rlc	a
      00013A 4F               [12]  692 	orl	a,r7
      00013B F7               [12]  693 	mov	@r1,a
                                    694 ;	key.c:87: key_buf[key_out][3] = (key_buf[key_out][3] << 1) | KEY_IN_4;
      00013C E5*34            [12]  695 	mov	a,_key_scan_key_out_65536_28
      00013E 25*34            [12]  696 	add	a,_key_scan_key_out_65536_28
      000140 25 E0            [12]  697 	add	a,acc
      000142 24r35            [12]  698 	add	a,#_key_scan_key_buf_65536_28
      000144 24 03            [12]  699 	add	a,#0x03
      000146 F9               [12]  700 	mov	r1,a
      000147 E7               [12]  701 	mov	a,@r1
      000148 27               [12]  702 	add	a,@r1
      000149 FF               [12]  703 	mov	r7,a
      00014A A2 A7            [12]  704 	mov	c,_P2_7
      00014C E4               [12]  705 	clr	a
      00014D 33               [12]  706 	rlc	a
      00014E FE               [12]  707 	mov	r6,a
      00014F 4F               [12]  708 	orl	a,r7
      000150 F7               [12]  709 	mov	@r1,a
                                    710 ;	key.c:89: for (i = 0; i < 4; i++)
      000151 7F 00            [12]  711 	mov	r7,#0x00
      000153                        712 00113$:
                                    713 ;	key.c:91: if ((key_buf[key_out][i] & 0x0F) == 0x00)
      000153 E5*34            [12]  714 	mov	a,_key_scan_key_out_65536_28
      000155 25*34            [12]  715 	add	a,_key_scan_key_out_65536_28
      000157 25 E0            [12]  716 	add	a,acc
      000159 FE               [12]  717 	mov	r6,a
      00015A 24r35            [12]  718 	add	a,#_key_scan_key_buf_65536_28
      00015C 2F               [12]  719 	add	a,r7
      00015D F9               [12]  720 	mov	r1,a
      00015E E7               [12]  721 	mov	a,@r1
      00015F FD               [12]  722 	mov	r5,a
      000160 54 0F            [12]  723 	anl	a,#0x0f
      000162 60 02            [24]  724 	jz	00139$
      000164 80 0A            [24]  725 	sjmp	00104$
      000166                        726 00139$:
                                    727 ;	key.c:93: key_sta[key_out][i] = 0;
      000166 EE               [12]  728 	mov	a,r6
      000167 24r10            [12]  729 	add	a,#_key_sta
      000169 FD               [12]  730 	mov	r5,a
      00016A 2F               [12]  731 	add	a,r7
      00016B F8               [12]  732 	mov	r0,a
      00016C 76 00            [12]  733 	mov	@r0,#0x00
      00016E 80 1A            [24]  734 	sjmp	00114$
      000170                        735 00104$:
                                    736 ;	key.c:95: else if ((key_buf[key_out][i] & 0x0F) == 0x0F)
      000170 EE               [12]  737 	mov	a,r6
      000171 24r35            [12]  738 	add	a,#_key_scan_key_buf_65536_28
      000173 2F               [12]  739 	add	a,r7
      000174 F9               [12]  740 	mov	r1,a
      000175 87 05            [24]  741 	mov	ar5,@r1
      000177 53 05 0F         [24]  742 	anl	ar5,#0x0f
      00017A 7C 00            [12]  743 	mov	r4,#0x00
      00017C BD 0F 0B         [24]  744 	cjne	r5,#0x0f,00114$
      00017F BC 00 08         [24]  745 	cjne	r4,#0x00,00114$
                                    746 ;	key.c:97: key_sta[key_out][i] = 1;
      000182 EE               [12]  747 	mov	a,r6
      000183 24r10            [12]  748 	add	a,#_key_sta
      000185 FE               [12]  749 	mov	r6,a
      000186 2F               [12]  750 	add	a,r7
      000187 F8               [12]  751 	mov	r0,a
      000188 76 01            [12]  752 	mov	@r0,#0x01
      00018A                        753 00114$:
                                    754 ;	key.c:89: for (i = 0; i < 4; i++)
      00018A 0F               [12]  755 	inc	r7
      00018B BF 04 00         [24]  756 	cjne	r7,#0x04,00142$
      00018E                        757 00142$:
      00018E 40 C3            [24]  758 	jc	00113$
                                    759 ;	key.c:101: key_out++;
      000190 05*34            [12]  760 	inc	_key_scan_key_out_65536_28
                                    761 ;	key.c:102: key_out = key_out & 0x03;
      000192 53*34 03         [24]  762 	anl	_key_scan_key_out_65536_28,#0x03
                                    763 ;	key.c:103: switch (key_out)
      000195 E5*34            [12]  764 	mov	a,_key_scan_key_out_65536_28
      000197 24 FC            [12]  765 	add	a,#0xff - 0x03
      000199 40 29            [24]  766 	jc	00115$
      00019B E5*34            [12]  767 	mov	a,_key_scan_key_out_65536_28
      00019D 75 F0 03         [24]  768 	mov	b,#0x03
      0001A0 A4               [48]  769 	mul	ab
      0001A1 90r01rA5         [24]  770 	mov	dptr,#00145$
      0001A4 73               [24]  771 	jmp	@a+dptr
      0001A5                        772 00145$:
      0001A5 02r01rB1         [24]  773 	ljmp	00107$
      0001A8 02r01rB6         [24]  774 	ljmp	00108$
      0001AB 02r01rBB         [24]  775 	ljmp	00109$
      0001AE 02r01rC0         [24]  776 	ljmp	00110$
                                    777 ;	key.c:105: case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
      0001B1                        778 00107$:
                                    779 ;	assignBit
      0001B1 D2 A0            [12]  780 	setb	_P2_0
                                    781 ;	assignBit
      0001B3 C2 A3            [12]  782 	clr	_P2_3
                                    783 ;	key.c:106: case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
      0001B5 22               [24]  784 	ret
      0001B6                        785 00108$:
                                    786 ;	assignBit
      0001B6 D2 A3            [12]  787 	setb	_P2_3
                                    788 ;	assignBit
      0001B8 C2 A2            [12]  789 	clr	_P2_2
                                    790 ;	key.c:107: case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
      0001BA 22               [24]  791 	ret
      0001BB                        792 00109$:
                                    793 ;	assignBit
      0001BB D2 A2            [12]  794 	setb	_P2_2
                                    795 ;	assignBit
      0001BD C2 A1            [12]  796 	clr	_P2_1
                                    797 ;	key.c:108: case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
      0001BF 22               [24]  798 	ret
      0001C0                        799 00110$:
                                    800 ;	assignBit
      0001C0 D2 A1            [12]  801 	setb	_P2_1
                                    802 ;	assignBit
      0001C2 C2 A0            [12]  803 	clr	_P2_0
                                    804 ;	key.c:110: }
      0001C4                        805 00115$:
                                    806 ;	key.c:111: }
      0001C4 22               [24]  807 	ret
                                    808 	.area CSEG    (CODE)
                                    809 	.area CONST   (CODE)
      000000                        810 ___str_0:
      000000 31 32 33               811 	.ascii "123"
      000003 00                     812 	.db 0x00
                                    813 	.area XINIT   (CODE)
                                    814 	.area CABS    (ABS,CODE)
